"""
Django settings for verzekeringen_api project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os, logging, logging.config
from environs import Env

env = Env()
env.read_env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")
BASE_URL = env.str("BASE_URL")

# Turn this off because of existing database we work with
SILENCED_SYSTEM_CHECKS = ["fields.W342"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "mozilla_django_oidc",
    "apps.scouts_auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_filters",
    "drf_yasg2",
    "corsheaders",
    "inuits",
    "apps.members",
    "apps.equipment",
    "apps.locations",
    "apps.insurances",
    "apps.info",
    "apps.mailing",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "verzekeringen_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "verzekeringen_api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env.str("DBNAME"),
        "USER": env.str("DBUSER"),
        "PASSWORD": env.str("DBPASSWORD"),
        "HOST": env.str("DBHOST"),
        "PORT": env.str("DBPORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Brussels"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = env.str("STATIC_ROOT")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Rest framework

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "apps.oidc.auth.InuitsOIDCAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "verzekeringen_api.pagination.PageNumberPagination",
    "EXCEPTION_HANDLER": "apps.base.utils.exception_handler",
}

# RESOURCES
RESOURCES_PATH = env.str("RESOURCES_PATH")
RESOURCES_MAIL_PATH = RESOURCES_PATH + env.str("RESOURCES_MAIL_PATH")
RESOURCES_CLAIMS_EMAIL_PATH = RESOURCES_MAIL_PATH + env.str("RESOURCES_CLAIMS_EMAIL_PATH")
RESOURCES_CLAIMS_EMAIL_NOTIFICATION_PATH = RESOURCES_MAIL_PATH + env.str("RESOURCES_CLAIMS_EMAIL_NOTIFICATION_PATH")

# Email
# We are going to use anymail which maps multiple providers like sendinblue with default django mailing
# For more info see https://anymail.readthedocs.io/en/stable/esps/sendinblue/
def setup_mail():
    global EMAIL_BACKEND
    global ANYMAIL
    global EMAIL_INSURANCE_FROM
    global EMAIL_INSURANCE_TO

    if env.str("DEVELOPMENT") or (not env.str("DEBUG") and env.bool("USE_SENDINBLUE", True)):
        EMAIL_BACKEND = "anymail.backends.sendinblue.EmailBackend"
        ANYMAIL["SENDINBLUE_API_KEY"] = env.str("SENDINBLUE_API_KEY")
        ANYMAIL["SENDINBLUE_TEMPLATE_ID"] = env.str("SENDINBLUE_TEMPLATE_ID", None)

    EMAIL_INSURANCE_FROM = env.str("EMAIL_INSURANCE_FROM", "")
    EMAIL_INSURANCE_TO = env.str("EMAIL_INSURANCE_TO", "").split(",")


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "mailcatcher"
EMAIL_PORT = "1025"
EMAIL_INSURANCE_FROM = ""
EMAIL_INSURANCE_REPLY_TO = EMAIL_INSURANCE_FROM
# EMAIL_INSURANCE_TO_LIST=verzekeringen@scoutsengidsenvlaanderen.be
EMAIL_INSURANCE_TO = []
# EMAIL_INSURANCE_CC=
# EMAIL_INSURANCE_BCC=
PDF_TEMPLATE_PATH = RESOURCES_PATH + "blank_insurance_claim.pdf"
TMP_FOLDER = RESOURCES_PATH + "temp"
ANYMAIL = {}
setup_mail()

# CORS
CORS_ORIGIN_WHITELIST = env.list("CORS_ORIGIN_WHITELIST")

# OIDC
AUTH_USER_MODEL = "scouts_auth.User"
AUTHENTICATION_BACKENDS = {
    "apps.oidc.auth.InuitsOIDCAuthenticationBackend",
}
OIDC_DRF_AUTH_BACKEND = "apps.oidc.auth.InuitsOIDCAuthenticationBackend"
OIDC_RP_SIGN_ALGO = "RS256"

OIDC_OP_JWKS_ENDPOINT = env.str("OIDC_OP_ISSUER") + env.str("OIDC_OP_JWKS_ENDPOINT")
OIDC_OP_TOKEN_ENDPOINT = env.str("OIDC_OP_ISSUER") + env.str("OIDC_OP_TOKEN_ENDPOINT")
if env.str("OIDC_OP_USER_ENDPOINT").startswith("http"):
    OIDC_OP_USER_ENDPOINT = env.str("OIDC_OP_USER_ENDPOINT")
else:
    OIDC_OP_USER_ENDPOINT = env.str("OIDC_OP_ISSUER") + env.str("OIDC_OP_USER_ENDPOINT")

OIDC_RP_CLIENT_ID = env.str("OIDC_RP_CLIENT_ID")
OIDC_RP_CLIENT_SECRET = env.str("OIDC_RP_CLIENT_SECRET")

GROUP_ADMIN_BASE_URL = "https://groepsadmin.scoutsengidsenvlaanderen.be/groepsadmin/rest-ga"
BELGIAN_CITY_SEARCH_ENDPOINT = GROUP_ADMIN_BASE_URL + "/gis/gemeente"
GROUP_ADMIN_MEMBER_SEARCH_ENDPOINT = GROUP_ADMIN_BASE_URL + "/zoeken"
GROUP_ADMIN_MEMBER_DETAIL_ENDPOINT = GROUP_ADMIN_BASE_URL + "/lid"
COMPANY_NON_MEMBER_DEFAULT_FIRST_NAME = "FIRMA:"


# Storages/S3
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

AWS_ACCESS_KEY_ID = env.str("S3_ACCESS_KEY")
AWS_SECRET_ACCESS_KEY = env.str("S3_ACCESS_SECRET")
AWS_STORAGE_BUCKET_NAME = env.str("S3_STORAGE_BUCKET_NAME")
AWS_S3_ENDPOINT_URL = env.str("S3_ENDPOINT_URL")
AWS_DEFAULT_ACL = "public-read"
AWS_S3_FILE_OVERWRITE = False
AWS_S3_SIGNATURE_VERSION = "s3v4"


LOGGING_CONFIG = None
LOGGING_LEVEL = "DEBUG" if env.str("DEBUG") else "INFO"
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(asctime)s - %(levelname)-7s - %(name)-12s - %(message)s",
        },
        "simple": {
            "format": "%(levelname)-8s - %(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": LOGGING_LEVEL,
            "formatter": "verbose",
        },
        # "file": {
        #     "class": "logging.FileHandler",
        #     "level": LOGGING_LEVEL,
        #     "filename": "scouts-kampvisum.debug.log",
        # },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "mozilla_django_oidc": {
            "handlers": ["console"],
            "level": LOGGING_LEVEL,
            "propagate": False,
        },
        "apps": {
            "handlers": ["console"],
            "level": LOGGING_LEVEL,
            "propagate": False,
        },
    },
}
logging.config.dictConfig(LOGGING)
